diff --git a/gmetad/conf.c.in b/gmetad/conf.c.in
index 8ed3cfd..886a091 100644
--- a/gmetad/conf.c.in
+++ b/gmetad/conf.c.in
@@ -77,12 +77,13 @@ static DOTCONF_CB(cb_data_source)
    unsigned int i;
    data_source_list_t *dslist;
    datum_t key, val, *find;
-   int port, rv=0;
+   int rv=0;
    unsigned long step;
    unsigned int source_index=0;
-   char *p, *str;
+   char *p, *str, *host, *port;
    char *endptr;
    struct sockaddr_in sa;
+   g_inet6_addr ia;
    gmetad_config_t *c = (gmetad_config_t*) cmd->option->info;
 
    source_index++;
@@ -114,7 +115,7 @@ static DOTCONF_CB(cb_data_source)
    debug_msg("Polling interval for %s is %u sec.", dslist->name, dslist->step);
    c->shortest_step = dslist->step;
 
-   dslist->sources = (g_inet_addr **) malloc( (cmd->arg_count-i) * sizeof(g_inet_addr *) );
+   dslist->sources = (g_inet6_addr **) malloc( (cmd->arg_count-i) * sizeof(g_inet6_addr *) );
    if (! dslist->sources )
       err_quit("Unable to malloc sources array");
 
@@ -125,31 +126,49 @@ static DOTCONF_CB(cb_data_source)
       {
          str = cmd->data.list[i];
 
-         p = strchr( str, ':' );
-         if( p )
-            {
-               /* Port is specified */
-               *p = '\0';
-               port = atoi ( p+1 );
+	p = strchr(str, '[');
+        if (p != NULL)
+            host = p + 1;
+        else
+            host = str;
+        p = strchr(str, ']');
+        if (p) {
+            *p = '\0';
+            if (*(p+1) == ':')
+                port = p+2;
+            else
+                port = "8649";
+        }
+        else {
+            p = strchr(host, ':');
+            if (p) {
+                if (p == strrchr(host, ':')) {
+                    *p = '\0';
+                    port = p+1;
+                }
+                else
+                    port = "8649";
             }
-         else
-            port = 8649;
+            else
+                port = "8649";
+        }
 
-         rv = g_gethostbyname( cmd->data.list[i], &sa, NULL);
-         if (!rv) {
+	
+
+        rv = g_getaddrinfo(host, port, &ia, NULL);
+        if (rv) {
             err_msg("Warning: we failed to resolve data source name %s", cmd->data.list[i]);
             continue;
-         }
-         str = (char*) malloc(GANGLIA_HOSTNAME_LEN);
-         my_inet_ntop(AF_INET, &sa.sin_addr, str, GANGLIA_HOSTNAME_LEN);
-
-         debug_msg("Trying to connect to %s:%d for [%s]", str, port, dslist->name);
-         dslist->sources[dslist->num_sources] = (g_inet_addr *) g_inetaddr_new ( str, port );
-         if(! dslist->sources[dslist->num_sources])
-               err_quit("Unable to create inetaddr [%s:%d] and save it to [%s]", str, port, dslist->name);
-         else
-               dslist->num_sources++;
-         free(str);
+        }
+        
+        debug_msg("Trying to connect to %s:%s for [%s]", host, port, dslist->name);
+        dslist->sources[dslist->num_sources] = (g_inet6_addr *)malloc(sizeof(g_inet6_addr));
+        if (dslist->sources[dslist->num_sources] == NULL)
+            err_quit("Unable to create inetaddr [%s:%s] and save it to [%s]", host, port, dslist->name);
+        else {
+            memcpy(dslist->sources[dslist->num_sources], &ia, sizeof(g_inet6_addr));
+            dslist->num_sources++;
+        }
       }
 
    key.data = cmd->data.list[0];
diff --git a/gmetad/data_thread.c b/gmetad/data_thread.c
index 55818fa..a9dc57d 100644
--- a/gmetad/data_thread.c
+++ b/gmetad/data_thread.c
@@ -24,7 +24,7 @@ data_thread ( void *arg )
 {
    int i, bytes_read, rval;
    data_source_list_t *d = (data_source_list_t *)arg;
-   g_inet_addr *addr;
+   g_inet6_addr *addr;
    g_tcp_socket *sock=0;
    datum_t key;
    char *buf;
@@ -68,7 +68,7 @@ data_thread ( void *arg )
          
          /* If we successfully read from a good data source last time then try the same host again first. */
          if(d->last_good_index != -1)
-           sock = g_tcp_socket_new ( d->sources[d->last_good_index] );
+           sock = g_tcp6_socket_new ( d->sources[d->last_good_index] );
 
          /* If there was no good connection last time or the above connect failed then try each host in the list. */
          if(!sock)
@@ -76,7 +76,7 @@ data_thread ( void *arg )
              for(i=0; i < d->num_sources; i++)
                {
                  /* Find first viable source in list. */
-                 sock = g_tcp_socket_new ( d->sources[i] );
+                 sock = g_tcp6_socket_new ( d->sources[i] );
                  if( sock )
                    {
                      d->last_good_index = i;
diff --git a/gmetad/gmetad.conf.in b/gmetad/gmetad.conf.in
index 1ca0566..23a7782 100644
--- a/gmetad/gmetad.conf.in
+++ b/gmetad/gmetad.conf.in
@@ -40,6 +40,7 @@
 # data_source "my cluster" 10 localhost  my.machine.edu:8649  1.2.3.5:8655
 # data_source "my grid" 50 1.3.4.7:8655 grid.org:8651 grid-backup.org:8651
 # data_source "another source" 1.3.4.7:8655  1.3.4.8
+# data_source "yet another source" fd25:d3b4:365d:2::4 [fd25:d3b4:365d:2::5]:8655
 
 data_source "my cluster" localhost
 
diff --git a/gmetad/gmetad.h b/gmetad/gmetad.h
index 2d22150..39d0dad 100644
--- a/gmetad/gmetad.h
+++ b/gmetad/gmetad.h
@@ -109,7 +109,7 @@ typedef struct
       char *name;
       unsigned int step;
       unsigned int num_sources;
-      g_inet_addr **sources;
+      g_inet6_addr **sources;
       int dead;
       int last_good_index;
    }
diff --git a/lib/inetaddr.c b/lib/inetaddr.c
index 9baaeb0..57410e8 100644
--- a/lib/inetaddr.c
+++ b/lib/inetaddr.c
@@ -26,6 +26,7 @@
 #include <netinet/in.h>
 #include <arpa/inet.h>
 #include <unistd.h>
+#include <netdb.h>
 
 #include "llist.h"
 #include "net.h"
@@ -69,6 +70,34 @@ g_gethostbyname(const char* hostname, struct sockaddr_in* sa, char** nicename)
   return rv;
 }
 
+int g_getaddrinfo(const char* hostname, const char* service, g_inet6_addr* ia, char** nicename)
+{
+  int rv = 0;
+  struct addrinfo hints;
+  struct addrinfo *result;
+  int s;
+  
+  memset(&hints, 0, sizeof(struct addrinfo));
+  hints.ai_family = AF_UNSPEC;    /* Allow IPv4 or IPv6 */
+  hints.ai_socktype = SOCK_STREAM;
+  hints.ai_flags = AI_PASSIVE;
+  hints.ai_protocol = 0;          /* Any protocol */
+  hints.ai_canonname = NULL;
+  hints.ai_addr = NULL;
+  hints.ai_next = NULL;
+  
+  s = getaddrinfo(hostname, service, &hints, &result);
+  if (s != 0) {
+    return s;
+  }
+  else {
+    ia->name = (char *)strdup(hostname);
+    ia->ai = result;
+    ia->ref_count = 1;
+  }
+  return s;
+}
+
 /* Need to free return value later */
 char*
 g_gethostbyaddr(const char* addr, size_t length, int type)
diff --git a/lib/net.h b/lib/net.h
index 829bbf5..bb4d008 100644
--- a/lib/net.h
+++ b/lib/net.h
@@ -35,6 +35,13 @@ typedef struct
 
 typedef struct
 {
+  char *name;
+  struct addrinfo *ai;
+  unsigned int ref_count;
+} g_inet6_addr;
+
+typedef struct
+{
   int sockfd;
   struct sockaddr sa;
   unsigned int ref_count;
@@ -52,6 +59,8 @@ int             g_gethostbyname(const char* hostname, struct sockaddr_in* sa, ch
 
 char*           g_gethostbyaddr(const char* addr, size_t length, int type);
 
+int             g_getaddrinfo(const char* hostname, const char* service, g_inet6_addr* ia, char** nicename);
+
 g_inet_addr*    g_inetaddr_new (const char* name, int port);
 
 void            g_inetaddr_delete (g_inet_addr* ia);
@@ -102,6 +111,8 @@ g_tcp_socket*   g_tcp_socket_connect (const char* hostname, int port);
 
 g_tcp_socket*   g_tcp_socket_new (const g_inet_addr* addr);
 
+g_tcp_socket*   g_tcp6_socket_new (const g_inet6_addr* addr);
+
 void            g_tcp_socket_delete(g_tcp_socket* s);
 
 g_tcp_socket*   g_tcp_socket_server_new (int port);
diff --git a/lib/tcp.c b/lib/tcp.c
index 667c4b9..242f5a6 100644
--- a/lib/tcp.c
+++ b/lib/tcp.c
@@ -22,6 +22,7 @@
  * Boston, MA  02111-1307, USA.
  */
 #include <unistd.h>
+#include <netdb.h>
 
 #include <gm_msg.h>
 #include "net.h"
@@ -80,6 +81,39 @@ g_tcp_socket_new (const g_inet_addr* addr)
   return s;
 }
 
+g_tcp_socket*
+g_tcp6_socket_new (const g_inet6_addr* addr)
+{
+  g_tcp_socket* s;
+  struct sockaddr* tsa;
+  struct addrinfo *result, *rp;
+  int sfd;
+  
+  for (rp = addr->ai; rp != NULL; rp = rp->ai_next) {
+    sfd = socket(rp->ai_family, rp->ai_socktype, rp->ai_protocol);
+    if (sfd == -1)
+      continue;
+    if (connect(sfd, rp->ai_addr, rp->ai_addrlen) != -1) {
+      tsa = rp->ai_addr;
+      break; //Success
+    }
+    close(sfd);
+  }
+  if (rp == NULL)
+    return NULL;
+  s = malloc(sizeof( g_tcp_socket ));
+  if (s == NULL) {
+    close(sfd);
+    return NULL;
+  }
+  memset( s, 0, sizeof( g_tcp_socket ));
+  s->sockfd = sfd;
+  s->ref_count = 1;
+  memcpy(&s->sa, tsa, sizeof(s->sa));
+
+  return s;
+}
+
 #if 0
 static void
 g_tcp_socket_ref(g_tcp_socket* s)
